
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ad8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000b6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001154  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000813  00000000  00000000  00001e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b08  00000000  00000000  00002653  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f1  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000666  00000000  00000000  0000380d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003e73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 02 	call	0x4a8	; 0x4a8 <main>
  8a:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t prevcarLED=1;
uint8_t normalmode = 1; //1 normal 0 pedestrian
void APP_init(void){
	
	//Car LED initialization
	LED_init(LED_CAR_PORT,LED_CAR_G_PIN);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_Y_PIN);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_init>
	LED_init(LED_CAR_PORT,LED_CAR_R_PIN);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_init>
	
	//Pedestrian LED initialization
	LED_init(LED_PED_PORT,LED_PED_G_PIN);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_init>
	LED_init(LED_PED_PORT,LED_PED_Y_PIN);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_init>
	LED_init(LED_PED_PORT,LED_PED_R_PIN);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 c6 01 	call	0x38c	; 0x38c <LED_init>
	
	//Button initialization
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 c2 01 	call	0x384	; 0x384 <BUTTON_init>
	
	//Timer initialization
	TIMER_init();
  ca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <TIMER_init>
	
	//Enable Global interrupts & setup rising edge detection for button
	sei();
  ce:	78 94       	sei
	RISING_EDGE_SETUP();
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
  d6:	8b b7       	in	r24, 0x3b	; 59
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bf       	out	0x3b, r24	; 59
  dc:	08 95       	ret

000000de <APP_start>:
}
void APP_start(void){
  de:	cf 93       	push	r28
	//variable to be used in for loop
	uint8_t i;
	
	//if normal mode or need transition (i.e. car green led or yellow is on)
	if(normalmode || carLED==0 || carLED==1){
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	81 11       	cpse	r24, r1
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <APP_start+0x18>
  e8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
  ec:	99 23       	and	r25, r25
  ee:	19 f0       	breq	.+6      	; 0xf6 <APP_start+0x18>
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <APP_start+0x18>
  f4:	dd c0       	rjmp	.+442    	; 0x2b0 <APP_start+0x1d2>
		if(!normalmode){
  f6:	81 11       	cpse	r24, r1
  f8:	03 c0       	rjmp	.+6      	; 0x100 <APP_start+0x22>
			carLED=1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		}
		//Configuring Pedestrian LEDs 
		LED_off(LED_PED_PORT,LED_PED_G_PIN);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	82 e4       	ldi	r24, 0x42	; 66
 104:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	82 e4       	ldi	r24, 0x42	; 66
 10c:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		//LED_off(LED_PED_PORT,LED_PED_R_PIN);
		
		switch(carLED){
 110:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	21 f1       	breq	.+72     	; 0x160 <APP_start+0x82>
 118:	20 f0       	brcs	.+8      	; 0x122 <APP_start+0x44>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	09 f4       	brne	.+2      	; 0x120 <APP_start+0x42>
 11e:	a1 c0       	rjmp	.+322    	; 0x262 <APP_start+0x184>
 120:	c0 c0       	rjmp	.+384    	; 0x2a2 <APP_start+0x1c4>
			//Case GREEN LED
			case 0:
				LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
				LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
				LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 132:	62 e0       	ldi	r22, 0x02	; 2
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
				
				for(i=0;i<50;i++){
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	09 c0       	rjmp	.+18     	; 0x150 <APP_start+0x72>
					TIMER_delay(68);
 13e:	84 e4       	ldi	r24, 0x44	; 68
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
					if(!normalmode)break;//check if ISR was called
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	88 23       	and	r24, r24
 14c:	19 f0       	breq	.+6      	; 0x154 <APP_start+0x76>
			case 0:
				LED_on(LED_CAR_PORT,LED_CAR_G_PIN);
				LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
				LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
				
				for(i=0;i<50;i++){
 14e:	cf 5f       	subi	r28, 0xFF	; 255
 150:	c2 33       	cpi	r28, 0x32	; 50
 152:	a8 f3       	brcs	.-22     	; 0x13e <APP_start+0x60>
					TIMER_delay(68);
					if(!normalmode)break;//check if ISR was called
				}
				carLED=1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				prevcarLED=0;
 15a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <prevcarLED>
				break;
 15e:	04 c1       	rjmp	.+520    	; 0x368 <APP_start+0x28a>
			//Case YELLOW LED 
			case 1:
				//if not normalmode then we need to blink both
				
				if(!normalmode){
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	81 11       	cpse	r24, r1
 166:	5e c0       	rjmp	.+188    	; 0x224 <APP_start+0x146>
					if(prevcarLED!=2){
 168:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	69 f1       	breq	.+90     	; 0x1ca <APP_start+0xec>
						LED_on(LED_PED_PORT,LED_PED_R_PIN);
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
						//blink both yellow leds
						for(i=0;i<5;i++){
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	25 c0       	rjmp	.+74     	; 0x1c6 <APP_start+0xe8>
							LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
							LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	82 e4       	ldi	r24, 0x42	; 66
 188:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
							TIMER_delay(390);
 18c:	86 e8       	ldi	r24, 0x86	; 134
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
							LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
							LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
							TIMER_delay(190);
 1a4:	8e eb       	ldi	r24, 0xBE	; 190
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
							LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
							LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
							TIMER_delay(390);
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
				
				if(!normalmode){
					if(prevcarLED!=2){
						LED_on(LED_PED_PORT,LED_PED_R_PIN);
						//blink both yellow leds
						for(i=0;i<5;i++){
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
 1c6:	c5 30       	cpi	r28, 0x05	; 5
 1c8:	c8 f2       	brcs	.-78     	; 0x17c <APP_start+0x9e>
							LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
							LED_on(LED_PED_PORT,LED_PED_Y_PIN);
							TIMER_delay(390);
						}
					}
					prevcarLED=1;//to go to Ped lights logic
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
					carLED=2;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	81 e4       	ldi	r24, 0x41	; 65
 1da:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
 1de:	25 c0       	rjmp	.+74     	; 0x22a <APP_start+0x14c>
				}else{
					//blink car yellow led
					for(i=0;i<5;i++){
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	81 e4       	ldi	r24, 0x41	; 65
 1e4:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
						TIMER_delay(380);
 1e8:	8c e7       	ldi	r24, 0x7C	; 124
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
						LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
						TIMER_delay(180);
 1f8:	84 eb       	ldi	r24, 0xB4	; 180
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
						LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
						TIMER_delay(380);
 208:	8c e7       	ldi	r24, 0x7C	; 124
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
						if(!normalmode){//check if ISR was called
 210:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 214:	81 11       	cpse	r24, r1
 216:	04 c0       	rjmp	.+8      	; 0x220 <APP_start+0x142>
							prevcarLED=1;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
							break;
 21e:	05 c0       	rjmp	.+10     	; 0x22a <APP_start+0x14c>
					prevcarLED=1;//to go to Ped lights logic
					carLED=2;
					LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
				}else{
					//blink car yellow led
					for(i=0;i<5;i++){
 220:	cf 5f       	subi	r28, 0xFF	; 255
 222:	01 c0       	rjmp	.+2      	; 0x226 <APP_start+0x148>
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	c5 30       	cpi	r28, 0x05	; 5
 228:	d8 f2       	brcs	.-74     	; 0x1e0 <APP_start+0x102>
							prevcarLED=1;
							break;
						}
					}
				}
				LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
				LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	82 e4       	ldi	r24, 0x42	; 66
 236:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
				//Configure variables for correct switching
				if(prevcarLED==0){
 23a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 23e:	81 11       	cpse	r24, r1
 240:	07 c0       	rjmp	.+14     	; 0x250 <APP_start+0x172>
					carLED=2;
 242:	82 e0       	ldi	r24, 0x02	; 2
 244:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
					prevcarLED=1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 24e:	8c c0       	rjmp	.+280    	; 0x368 <APP_start+0x28a>
				}else if(prevcarLED==2){
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	09 f0       	breq	.+2      	; 0x256 <APP_start+0x178>
 254:	89 c0       	rjmp	.+274    	; 0x368 <APP_start+0x28a>
					carLED=0;
 256:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
					prevcarLED=1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 260:	83 c0       	rjmp	.+262    	; 0x368 <APP_start+0x28a>
				}
				break;
			//Case RED LED
			case 2:
				LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
				LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e4       	ldi	r24, 0x41	; 65
 26e:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
				LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	81 e4       	ldi	r24, 0x41	; 65
 276:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
				for(i=0;i<50;i++){
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	09 c0       	rjmp	.+18     	; 0x290 <APP_start+0x1b2>
					TIMER_delay(68);
 27e:	84 e4       	ldi	r24, 0x44	; 68
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
					if(!normalmode)break;
 286:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 28a:	88 23       	and	r24, r24
 28c:	19 f0       	breq	.+6      	; 0x294 <APP_start+0x1b6>
			//Case RED LED
			case 2:
				LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
				LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
				LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
				for(i=0;i<50;i++){
 28e:	cf 5f       	subi	r28, 0xFF	; 255
 290:	c2 33       	cpi	r28, 0x32	; 50
 292:	a8 f3       	brcs	.-22     	; 0x27e <APP_start+0x1a0>
					TIMER_delay(68);
					if(!normalmode)break;
				}
				prevcarLED=2;
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
				carLED=1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				break;
 2a0:	63 c0       	rjmp	.+198    	; 0x368 <APP_start+0x28a>
			default:
				carLED=2;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				prevcarLED=1;
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
				break;
 2ae:	5c c0       	rjmp	.+184    	; 0x368 <APP_start+0x28a>
		}
		
	}else{
		//Configure PED LEDs
		LED_on(LED_PED_PORT,LED_PED_G_PIN);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	82 e4       	ldi	r24, 0x42	; 66
 2bc:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		LED_off(LED_PED_PORT,LED_PED_R_PIN);
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	82 e4       	ldi	r24, 0x42	; 66
 2c4:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		
		//Configure CAR LEDs
		LED_off(LED_CAR_PORT,LED_CAR_G_PIN);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	81 e4       	ldi	r24, 0x41	; 65
 2cc:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	81 e4       	ldi	r24, 0x41	; 65
 2d4:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_R_PIN);
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	81 e4       	ldi	r24, 0x41	; 65
 2dc:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
		TIMER_delay(5000);//5 sec delay
 2e0:	88 e8       	ldi	r24, 0x88	; 136
 2e2:	93 e1       	ldi	r25, 0x13	; 19
 2e4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
		
		//make sure car red light is off
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		
		//blink both yellow while ped green is on
		for(i=0;i<5;i++){
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	25 c0       	rjmp	.+74     	; 0x33e <APP_start+0x260>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	81 e4       	ldi	r24, 0x41	; 65
 2f8:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	82 e4       	ldi	r24, 0x42	; 66
 300:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
			TIMER_delay(390);
 304:	86 e8       	ldi	r24, 0x86	; 134
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	81 e4       	ldi	r24, 0x41	; 65
 310:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
			LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
			TIMER_delay(190);
 31c:	8e eb       	ldi	r24, 0xBE	; 190
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	81 e4       	ldi	r24, 0x41	; 65
 328:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
			TIMER_delay(390);
 334:	86 e8       	ldi	r24, 0x86	; 134
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <TIMER_delay>
		
		//make sure car red light is off
		LED_off(LED_CAR_PORT,LED_CAR_R_PIN);
		
		//blink both yellow while ped green is on
		for(i=0;i<5;i++){
 33c:	cf 5f       	subi	r28, 0xFF	; 255
 33e:	c5 30       	cpi	r28, 0x05	; 5
 340:	c8 f2       	brcs	.-78     	; 0x2f4 <APP_start+0x216>
			LED_on(LED_CAR_PORT,LED_CAR_Y_PIN);
			LED_on(LED_PED_PORT,LED_PED_Y_PIN);
			TIMER_delay(390);
		}
		//Turn off yellow LEDs 
		LED_off(LED_CAR_PORT,LED_CAR_Y_PIN);
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		LED_off(LED_PED_PORT,LED_PED_Y_PIN);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	82 e4       	ldi	r24, 0x42	; 66
 34e:	0e 94 ce 01 	call	0x39c	; 0x39c <LED_off>
		//turn on PED red LED
		LED_on(LED_PED_PORT,LED_PED_R_PIN);
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	82 e4       	ldi	r24, 0x42	; 66
 356:	0e 94 ca 01 	call	0x394	; 0x394 <LED_on>
		//reset normalmode
		normalmode=1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		//Configure carLED variables
		carLED=0;
 360:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		prevcarLED=1;
 364:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
	}
	
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <__vector_1>:

ISR(EXT_INT_0){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
	normalmode=0;
 376:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <BUTTON_init>:
 */ 
#include "button.h"

//initialize
void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin){
	DIO_init(buttonPort,buttonPin,IN);
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_init>
 38a:	08 95       	ret

0000038c <LED_init>:
 */ 
#include "led.h"


void LED_init(uint8_t ledPort,uint8_t ledPin){
	DIO_init(ledPort,ledPin,OUT);
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	0e 94 59 02 	call	0x4b2	; 0x4b2 <DIO_init>
 392:	08 95       	ret

00000394 <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_write>
 39a:	08 95       	ret

0000039c <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin){
	DIO_write(ledPort,ledPin,LOW);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <DIO_write>
 3a2:	08 95       	ret

000003a4 <TIMER_init>:
#include "timer.h"
#include <math.h>
#include "../../Utilities/bit_manipulation.h"

void TIMER_init(){
	TCCR0 = 0x00; //normal mode
 3a4:	13 be       	out	0x33, r1	; 51
 3a6:	08 95       	ret

000003a8 <TIMER_delay>:
}
void TIMER_delay(uint16_t millisec){
 3a8:	8f 92       	push	r8
 3aa:	9f 92       	push	r9
 3ac:	af 92       	push	r10
 3ae:	bf 92       	push	r11
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ec 01       	movw	r28, r24
	//max delay 256 micro second
	//at 1MHz no prescaler
	// 256 prescaler 
	Ttick = 256.0/1000.0; //ms    Ttick = Presc/FCPU
	Tmaxdelay= 65.536; //ms		Tmaxdelay = Ttick * 2^8
	if(millisec<Tmaxdelay){
 3be:	bc 01       	movw	r22, r24
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatunsisf>
 3c8:	6b 01       	movw	r12, r22
 3ca:	7c 01       	movw	r14, r24
 3cc:	2f e6       	ldi	r18, 0x6F	; 111
 3ce:	32 e1       	ldi	r19, 0x12	; 18
 3d0:	43 e8       	ldi	r20, 0x83	; 131
 3d2:	52 e4       	ldi	r21, 0x42	; 66
 3d4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__cmpsf2>
 3d8:	88 23       	and	r24, r24
 3da:	9c f4       	brge	.+38     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
 3dc:	a7 01       	movw	r20, r14
 3de:	96 01       	movw	r18, r12
 3e0:	6f e6       	ldi	r22, 0x6F	; 111
 3e2:	72 e1       	ldi	r23, 0x12	; 18
 3e4:	83 e8       	ldi	r24, 0x83	; 131
 3e6:	92 e4       	ldi	r25, 0x42	; 66
 3e8:	0e 94 4d 03 	call	0x69a	; 0x69a <__subsf3>
 3ec:	2f e6       	ldi	r18, 0x6F	; 111
 3ee:	32 e1       	ldi	r19, 0x12	; 18
 3f0:	43 e8       	ldi	r20, 0x83	; 131
 3f2:	5e e3       	ldi	r21, 0x3E	; 62
 3f4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 3f8:	0e 94 48 04 	call	0x890	; 0x890 <__fixunssfsi>
		Noverflows = 1;
 3fc:	c1 e0       	ldi	r28, 0x01	; 1
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
 400:	35 c0       	rjmp	.+106    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		
	}else if(millisec == (int)Tmaxdelay){
 402:	c1 34       	cpi	r28, 0x41	; 65
 404:	d1 05       	cpc	r29, r1
 406:	79 f1       	breq	.+94     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		TimerInitial=0;
		Noverflows=1;
	}else{
		Noverflows = ceil((double)millisec/Tmaxdelay);
 408:	2f e6       	ldi	r18, 0x6F	; 111
 40a:	32 e1       	ldi	r19, 0x12	; 18
 40c:	43 e8       	ldi	r20, 0x83	; 131
 40e:	52 e4       	ldi	r21, 0x42	; 66
 410:	c7 01       	movw	r24, r14
 412:	b6 01       	movw	r22, r12
 414:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 418:	0e 94 ba 03 	call	0x774	; 0x774 <ceil>
 41c:	0e 94 48 04 	call	0x890	; 0x890 <__fixunssfsi>
 420:	4b 01       	movw	r8, r22
 422:	5c 01       	movw	r10, r24
 424:	eb 01       	movw	r28, r22
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
 426:	2f e6       	ldi	r18, 0x6F	; 111
 428:	32 e1       	ldi	r19, 0x12	; 18
 42a:	43 e8       	ldi	r20, 0x83	; 131
 42c:	5e e3       	ldi	r21, 0x3E	; 62
 42e:	c7 01       	movw	r24, r14
 430:	b6 01       	movw	r22, r12
 432:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 436:	6b 01       	movw	r12, r22
 438:	7c 01       	movw	r14, r24
 43a:	b4 01       	movw	r22, r8
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatunsisf>
 444:	9b 01       	movw	r18, r22
 446:	ac 01       	movw	r20, r24
 448:	c7 01       	movw	r24, r14
 44a:	b6 01       	movw	r22, r12
 44c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <__divsf3>
 450:	9b 01       	movw	r18, r22
 452:	ac 01       	movw	r20, r24
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	93 e4       	ldi	r25, 0x43	; 67
 45c:	0e 94 4d 03 	call	0x69a	; 0x69a <__subsf3>
 460:	0e 94 48 04 	call	0x890	; 0x890 <__fixunssfsi>
 464:	03 c0       	rjmp	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	if(millisec<Tmaxdelay){
		TimerInitial = (Tmaxdelay-millisec)/Ttick;
		Noverflows = 1;
		
	}else if(millisec == (int)Tmaxdelay){
		TimerInitial=0;
 466:	60 e0       	ldi	r22, 0x00	; 0
		Noverflows=1;
 468:	c1 e0       	ldi	r28, 0x01	; 1
 46a:	d0 e0       	ldi	r29, 0x00	; 0
	}else{
		Noverflows = ceil((double)millisec/Tmaxdelay);
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
 46c:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2); //set 256 prescaler
 46e:	83 b7       	in	r24, 0x33	; 51
 470:	84 60       	ori	r24, 0x04	; 4
 472:	83 bf       	out	0x33, r24	; 51
	TCCR0 = 0x00; //normal mode
}
void TIMER_delay(uint16_t millisec){
	uint16_t Noverflows,TimerInitial;
	double Tmaxdelay,Ttick;
	uint32_t overFlowcnt=0;
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); //set 256 prescaler
	while(overFlowcnt<Noverflows){
 478:	08 c0       	rjmp	.+16     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		//busy wait
		while(READ_BIT(TIFR,0)==0);
 47a:	08 b6       	in	r0, 0x38	; 56
 47c:	00 fe       	sbrs	r0, 0
 47e:	fd cf       	rjmp	.-6      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		//clear overflow flag
		SET_BIT(TIFR,0);
 480:	88 b7       	in	r24, 0x38	; 56
 482:	81 60       	ori	r24, 0x01	; 1
 484:	88 bf       	out	0x38, r24	; 56
		//increment counter
		overFlowcnt++;
 486:	2f 5f       	subi	r18, 0xFF	; 255
 488:	3f 4f       	sbci	r19, 0xFF	; 255
		TimerInitial = (1<<8) - ((double)millisec/Ttick)/Noverflows;
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2); //set 256 prescaler
	while(overFlowcnt<Noverflows){
 48a:	2c 17       	cp	r18, r28
 48c:	3d 07       	cpc	r19, r29
 48e:	a8 f3       	brcs	.-22     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
		SET_BIT(TIFR,0);
		//increment counter
		overFlowcnt++;
	}
	//Timer stop
	TCCR0 = 0x00;
 490:	13 be       	out	0x33, r1	; 51
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	08 95       	ret

000004a8 <main>:


int main(void)
{
	//Initialize
    APP_init();
 4a8:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	//Main loop
	while(1){
		APP_start();
 4ac:	0e 94 6f 00 	call	0xde	; 0xde <APP_start>
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <main+0x4>

000004b2 <DIO_init>:
// global variables
// function definitions

void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber){
 4b2:	82 34       	cpi	r24, 0x42	; 66
 4b4:	31 f1       	breq	.+76     	; 0x502 <DIO_init+0x50>
 4b6:	18 f4       	brcc	.+6      	; 0x4be <DIO_init+0xc>
 4b8:	81 34       	cpi	r24, 0x41	; 65
 4ba:	39 f0       	breq	.+14     	; 0x4ca <DIO_init+0x18>
 4bc:	08 95       	ret
 4be:	83 34       	cpi	r24, 0x43	; 67
 4c0:	e1 f1       	breq	.+120    	; 0x53a <DIO_init+0x88>
 4c2:	84 34       	cpi	r24, 0x44	; 68
 4c4:	09 f4       	brne	.+2      	; 0x4c8 <DIO_init+0x16>
 4c6:	54 c0       	rjmp	.+168    	; 0x570 <DIO_init+0xbe>
 4c8:	08 95       	ret
		case PORT_A:
			if(direction == IN){
 4ca:	41 11       	cpse	r20, r1
 4cc:	0c c0       	rjmp	.+24     	; 0x4e6 <DIO_init+0x34>
				CLEAR_BIT(DDRA,pinNumber);
 4ce:	2a b3       	in	r18, 0x1a	; 26
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_init+0x28>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	6a 95       	dec	r22
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_init+0x24>
 4de:	80 95       	com	r24
 4e0:	82 23       	and	r24, r18
 4e2:	8a bb       	out	0x1a, r24	; 26
 4e4:	08 95       	ret
			}else if (direction == OUT){
 4e6:	41 30       	cpi	r20, 0x01	; 1
 4e8:	09 f0       	breq	.+2      	; 0x4ec <DIO_init+0x3a>
 4ea:	5c c0       	rjmp	.+184    	; 0x5a4 <DIO_init+0xf2>
				SET_BIT(DDRA,pinNumber);
 4ec:	2a b3       	in	r18, 0x1a	; 26
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_init+0x46>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_init+0x42>
 4fc:	82 2b       	or	r24, r18
 4fe:	8a bb       	out	0x1a, r24	; 26
 500:	08 95       	ret
			else{
				//error handling
			}
			break;
		case PORT_B:
			if(direction == IN){
 502:	41 11       	cpse	r20, r1
 504:	0c c0       	rjmp	.+24     	; 0x51e <DIO_init+0x6c>
				CLEAR_BIT(DDRB,pinNumber);
 506:	27 b3       	in	r18, 0x17	; 23
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_init+0x60>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_init+0x5c>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	87 bb       	out	0x17, r24	; 23
 51c:	08 95       	ret
			}else if (direction == OUT){
 51e:	41 30       	cpi	r20, 0x01	; 1
 520:	09 f0       	breq	.+2      	; 0x524 <DIO_init+0x72>
 522:	40 c0       	rjmp	.+128    	; 0x5a4 <DIO_init+0xf2>
				SET_BIT(DDRB,pinNumber);
 524:	27 b3       	in	r18, 0x17	; 23
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_init+0x7e>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_init+0x7a>
 534:	82 2b       	or	r24, r18
 536:	87 bb       	out	0x17, r24	; 23
 538:	08 95       	ret
			else{
				//error handling
			}
			break;
		case PORT_C:
			if(direction == IN){
 53a:	41 11       	cpse	r20, r1
 53c:	0c c0       	rjmp	.+24     	; 0x556 <DIO_init+0xa4>
				CLEAR_BIT(DDRC,pinNumber);
 53e:	24 b3       	in	r18, 0x14	; 20
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_init+0x98>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_init+0x94>
 54e:	80 95       	com	r24
 550:	82 23       	and	r24, r18
 552:	84 bb       	out	0x14, r24	; 20
 554:	08 95       	ret
			}else if (direction == OUT){
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	29 f5       	brne	.+74     	; 0x5a4 <DIO_init+0xf2>
				SET_BIT(DDRC,pinNumber);
 55a:	24 b3       	in	r18, 0x14	; 20
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_init+0xb4>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_init+0xb0>
 56a:	82 2b       	or	r24, r18
 56c:	84 bb       	out	0x14, r24	; 20
 56e:	08 95       	ret
			else{
				//error handling
			}
			break;
		case PORT_D:
			if(direction == IN){
 570:	41 11       	cpse	r20, r1
 572:	0c c0       	rjmp	.+24     	; 0x58c <DIO_init+0xda>
				CLEAR_BIT(DDRD,pinNumber);
 574:	21 b3       	in	r18, 0x11	; 17
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_init+0xce>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_init+0xca>
 584:	80 95       	com	r24
 586:	82 23       	and	r24, r18
 588:	81 bb       	out	0x11, r24	; 17
 58a:	08 95       	ret
			}else if (direction == OUT){
 58c:	41 30       	cpi	r20, 0x01	; 1
 58e:	51 f4       	brne	.+20     	; 0x5a4 <DIO_init+0xf2>
				SET_BIT(DDRD,pinNumber);
 590:	21 b3       	in	r18, 0x11	; 17
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_init+0xea>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_init+0xe6>
 5a0:	82 2b       	or	r24, r18
 5a2:	81 bb       	out	0x11, r24	; 17
 5a4:	08 95       	ret

000005a6 <DIO_write>:
			break;
	}
}
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber){
 5a6:	82 34       	cpi	r24, 0x42	; 66
 5a8:	31 f1       	breq	.+76     	; 0x5f6 <DIO_write+0x50>
 5aa:	18 f4       	brcc	.+6      	; 0x5b2 <DIO_write+0xc>
 5ac:	81 34       	cpi	r24, 0x41	; 65
 5ae:	39 f0       	breq	.+14     	; 0x5be <DIO_write+0x18>
 5b0:	08 95       	ret
 5b2:	83 34       	cpi	r24, 0x43	; 67
 5b4:	e1 f1       	breq	.+120    	; 0x62e <DIO_write+0x88>
 5b6:	84 34       	cpi	r24, 0x44	; 68
 5b8:	09 f4       	brne	.+2      	; 0x5bc <DIO_write+0x16>
 5ba:	54 c0       	rjmp	.+168    	; 0x664 <DIO_write+0xbe>
 5bc:	08 95       	ret
		case PORT_A:
			if(value == LOW){
 5be:	41 11       	cpse	r20, r1
 5c0:	0c c0       	rjmp	.+24     	; 0x5da <DIO_write+0x34>
				//PORTA &= ~(1<<pinNumber); //write 0
				CLEAR_BIT(PORTA,pinNumber);
 5c2:	2b b3       	in	r18, 0x1b	; 27
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_write+0x28>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_write+0x24>
 5d2:	80 95       	com	r24
 5d4:	82 23       	and	r24, r18
 5d6:	8b bb       	out	0x1b, r24	; 27
 5d8:	08 95       	ret
			}else if (value == HIGH){
 5da:	41 30       	cpi	r20, 0x01	; 1
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <DIO_write+0x3a>
 5de:	5c c0       	rjmp	.+184    	; 0x698 <DIO_write+0xf2>
				//PORTA |= (1<<pinNumber); //write 1
				SET_BIT(PORTA,pinNumber);
 5e0:	2b b3       	in	r18, 0x1b	; 27
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_write+0x46>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_write+0x42>
 5f0:	82 2b       	or	r24, r18
 5f2:	8b bb       	out	0x1b, r24	; 27
 5f4:	08 95       	ret
			else{
				//error handling
			}
		break;
		case PORT_B:
			if(value == LOW){
 5f6:	41 11       	cpse	r20, r1
 5f8:	0c c0       	rjmp	.+24     	; 0x612 <DIO_write+0x6c>
				//PORTB &= ~(1<<pinNumber); //write 0
				CLEAR_BIT(PORTB,pinNumber);
 5fa:	28 b3       	in	r18, 0x18	; 24
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_write+0x60>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_write+0x5c>
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	88 bb       	out	0x18, r24	; 24
 610:	08 95       	ret
			}else if (value == HIGH){
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	09 f0       	breq	.+2      	; 0x618 <DIO_write+0x72>
 616:	40 c0       	rjmp	.+128    	; 0x698 <DIO_write+0xf2>
				//PORTB |= (1<<pinNumber); //write 1
				SET_BIT(PORTB,pinNumber);
 618:	28 b3       	in	r18, 0x18	; 24
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_write+0x7e>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_write+0x7a>
 628:	82 2b       	or	r24, r18
 62a:	88 bb       	out	0x18, r24	; 24
 62c:	08 95       	ret
			else{
				//error handling
			}
		break;
		case PORT_C:
			if(value == LOW){
 62e:	41 11       	cpse	r20, r1
 630:	0c c0       	rjmp	.+24     	; 0x64a <DIO_write+0xa4>
				//PORTC &= ~(1<<pinNumber); //write 0
				CLEAR_BIT(PORTC,pinNumber);
 632:	25 b3       	in	r18, 0x15	; 21
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_write+0x98>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_write+0x94>
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	85 bb       	out	0x15, r24	; 21
 648:	08 95       	ret
			}else if (value == HIGH){
 64a:	41 30       	cpi	r20, 0x01	; 1
 64c:	29 f5       	brne	.+74     	; 0x698 <DIO_write+0xf2>
				//PORTC |= (1<<pinNumber); //write 1
				SET_BIT(PORTC,pinNumber);
 64e:	25 b3       	in	r18, 0x15	; 21
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_write+0xb4>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_write+0xb0>
 65e:	82 2b       	or	r24, r18
 660:	85 bb       	out	0x15, r24	; 21
 662:	08 95       	ret
			else{
				//error handling
			}
		break;
		case PORT_D:
			if(value == LOW){
 664:	41 11       	cpse	r20, r1
 666:	0c c0       	rjmp	.+24     	; 0x680 <DIO_write+0xda>
				//PORTD &= ~(1<<pinNumber); //write 0
				CLEAR_BIT(PORTD,pinNumber);
 668:	22 b3       	in	r18, 0x12	; 18
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_write+0xce>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_write+0xca>
 678:	80 95       	com	r24
 67a:	82 23       	and	r24, r18
 67c:	82 bb       	out	0x12, r24	; 18
 67e:	08 95       	ret
			}else if (value == HIGH){
 680:	41 30       	cpi	r20, 0x01	; 1
 682:	51 f4       	brne	.+20     	; 0x698 <DIO_write+0xf2>
				//PORTD |= (1<<pinNumber); //write 1
				SET_BIT(PORTD,pinNumber);
 684:	22 b3       	in	r18, 0x12	; 18
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_write+0xea>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	6a 95       	dec	r22
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_write+0xe6>
 694:	82 2b       	or	r24, r18
 696:	82 bb       	out	0x12, r24	; 18
 698:	08 95       	ret

0000069a <__subsf3>:
 69a:	50 58       	subi	r21, 0x80	; 128

0000069c <__addsf3>:
 69c:	bb 27       	eor	r27, r27
 69e:	aa 27       	eor	r26, r26
 6a0:	0e 94 65 03 	call	0x6ca	; 0x6ca <__addsf3x>
 6a4:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_round>
 6a8:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_pscA>
 6ac:	38 f0       	brcs	.+14     	; 0x6bc <__addsf3+0x20>
 6ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscB>
 6b2:	20 f0       	brcs	.+8      	; 0x6bc <__addsf3+0x20>
 6b4:	39 f4       	brne	.+14     	; 0x6c4 <__addsf3+0x28>
 6b6:	9f 3f       	cpi	r25, 0xFF	; 255
 6b8:	19 f4       	brne	.+6      	; 0x6c0 <__addsf3+0x24>
 6ba:	26 f4       	brtc	.+8      	; 0x6c4 <__addsf3+0x28>
 6bc:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_nan>
 6c0:	0e f4       	brtc	.+2      	; 0x6c4 <__addsf3+0x28>
 6c2:	e0 95       	com	r30
 6c4:	e7 fb       	bst	r30, 7
 6c6:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>

000006ca <__addsf3x>:
 6ca:	e9 2f       	mov	r30, r25
 6cc:	0e 94 29 05 	call	0xa52	; 0xa52 <__fp_split3>
 6d0:	58 f3       	brcs	.-42     	; 0x6a8 <__addsf3+0xc>
 6d2:	ba 17       	cp	r27, r26
 6d4:	62 07       	cpc	r22, r18
 6d6:	73 07       	cpc	r23, r19
 6d8:	84 07       	cpc	r24, r20
 6da:	95 07       	cpc	r25, r21
 6dc:	20 f0       	brcs	.+8      	; 0x6e6 <__addsf3x+0x1c>
 6de:	79 f4       	brne	.+30     	; 0x6fe <__addsf3x+0x34>
 6e0:	a6 f5       	brtc	.+104    	; 0x74a <__addsf3x+0x80>
 6e2:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_zero>
 6e6:	0e f4       	brtc	.+2      	; 0x6ea <__addsf3x+0x20>
 6e8:	e0 95       	com	r30
 6ea:	0b 2e       	mov	r0, r27
 6ec:	ba 2f       	mov	r27, r26
 6ee:	a0 2d       	mov	r26, r0
 6f0:	0b 01       	movw	r0, r22
 6f2:	b9 01       	movw	r22, r18
 6f4:	90 01       	movw	r18, r0
 6f6:	0c 01       	movw	r0, r24
 6f8:	ca 01       	movw	r24, r20
 6fa:	a0 01       	movw	r20, r0
 6fc:	11 24       	eor	r1, r1
 6fe:	ff 27       	eor	r31, r31
 700:	59 1b       	sub	r21, r25
 702:	99 f0       	breq	.+38     	; 0x72a <__addsf3x+0x60>
 704:	59 3f       	cpi	r21, 0xF9	; 249
 706:	50 f4       	brcc	.+20     	; 0x71c <__addsf3x+0x52>
 708:	50 3e       	cpi	r21, 0xE0	; 224
 70a:	68 f1       	brcs	.+90     	; 0x766 <__addsf3x+0x9c>
 70c:	1a 16       	cp	r1, r26
 70e:	f0 40       	sbci	r31, 0x00	; 0
 710:	a2 2f       	mov	r26, r18
 712:	23 2f       	mov	r18, r19
 714:	34 2f       	mov	r19, r20
 716:	44 27       	eor	r20, r20
 718:	58 5f       	subi	r21, 0xF8	; 248
 71a:	f3 cf       	rjmp	.-26     	; 0x702 <__addsf3x+0x38>
 71c:	46 95       	lsr	r20
 71e:	37 95       	ror	r19
 720:	27 95       	ror	r18
 722:	a7 95       	ror	r26
 724:	f0 40       	sbci	r31, 0x00	; 0
 726:	53 95       	inc	r21
 728:	c9 f7       	brne	.-14     	; 0x71c <__addsf3x+0x52>
 72a:	7e f4       	brtc	.+30     	; 0x74a <__addsf3x+0x80>
 72c:	1f 16       	cp	r1, r31
 72e:	ba 0b       	sbc	r27, r26
 730:	62 0b       	sbc	r22, r18
 732:	73 0b       	sbc	r23, r19
 734:	84 0b       	sbc	r24, r20
 736:	ba f0       	brmi	.+46     	; 0x766 <__addsf3x+0x9c>
 738:	91 50       	subi	r25, 0x01	; 1
 73a:	a1 f0       	breq	.+40     	; 0x764 <__addsf3x+0x9a>
 73c:	ff 0f       	add	r31, r31
 73e:	bb 1f       	adc	r27, r27
 740:	66 1f       	adc	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	c2 f7       	brpl	.-16     	; 0x738 <__addsf3x+0x6e>
 748:	0e c0       	rjmp	.+28     	; 0x766 <__addsf3x+0x9c>
 74a:	ba 0f       	add	r27, r26
 74c:	62 1f       	adc	r22, r18
 74e:	73 1f       	adc	r23, r19
 750:	84 1f       	adc	r24, r20
 752:	48 f4       	brcc	.+18     	; 0x766 <__addsf3x+0x9c>
 754:	87 95       	ror	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f7 95       	ror	r31
 75e:	9e 3f       	cpi	r25, 0xFE	; 254
 760:	08 f0       	brcs	.+2      	; 0x764 <__addsf3x+0x9a>
 762:	b0 cf       	rjmp	.-160    	; 0x6c4 <__addsf3+0x28>
 764:	93 95       	inc	r25
 766:	88 0f       	add	r24, r24
 768:	08 f0       	brcs	.+2      	; 0x76c <__addsf3x+0xa2>
 76a:	99 27       	eor	r25, r25
 76c:	ee 0f       	add	r30, r30
 76e:	97 95       	ror	r25
 770:	87 95       	ror	r24
 772:	08 95       	ret

00000774 <ceil>:
 774:	0e 94 4b 05 	call	0xa96	; 0xa96 <__fp_trunc>
 778:	90 f0       	brcs	.+36     	; 0x79e <ceil+0x2a>
 77a:	9f 37       	cpi	r25, 0x7F	; 127
 77c:	48 f4       	brcc	.+18     	; 0x790 <ceil+0x1c>
 77e:	91 11       	cpse	r25, r1
 780:	16 f4       	brtc	.+4      	; 0x786 <ceil+0x12>
 782:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_szero>
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	80 e8       	ldi	r24, 0x80	; 128
 78c:	9f e3       	ldi	r25, 0x3F	; 63
 78e:	08 95       	ret
 790:	26 f0       	brts	.+8      	; 0x79a <ceil+0x26>
 792:	1b 16       	cp	r1, r27
 794:	61 1d       	adc	r22, r1
 796:	71 1d       	adc	r23, r1
 798:	81 1d       	adc	r24, r1
 79a:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_mintl>
 79e:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <__fp_mpack>

000007a2 <__cmpsf2>:
 7a2:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_cmp>
 7a6:	08 f4       	brcc	.+2      	; 0x7aa <__cmpsf2+0x8>
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	08 95       	ret

000007ac <__divsf3>:
 7ac:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divsf3x>
 7b0:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__fp_round>
 7b4:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_pscB>
 7b8:	58 f0       	brcs	.+22     	; 0x7d0 <__divsf3+0x24>
 7ba:	0e 94 0a 05 	call	0xa14	; 0xa14 <__fp_pscA>
 7be:	40 f0       	brcs	.+16     	; 0x7d0 <__divsf3+0x24>
 7c0:	29 f4       	brne	.+10     	; 0x7cc <__divsf3+0x20>
 7c2:	5f 3f       	cpi	r21, 0xFF	; 255
 7c4:	29 f0       	breq	.+10     	; 0x7d0 <__divsf3+0x24>
 7c6:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 7ca:	51 11       	cpse	r21, r1
 7cc:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_szero>
 7d0:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_nan>

000007d4 <__divsf3x>:
 7d4:	0e 94 29 05 	call	0xa52	; 0xa52 <__fp_split3>
 7d8:	68 f3       	brcs	.-38     	; 0x7b4 <__divsf3+0x8>

000007da <__divsf3_pse>:
 7da:	99 23       	and	r25, r25
 7dc:	b1 f3       	breq	.-20     	; 0x7ca <__divsf3+0x1e>
 7de:	55 23       	and	r21, r21
 7e0:	91 f3       	breq	.-28     	; 0x7c6 <__divsf3+0x1a>
 7e2:	95 1b       	sub	r25, r21
 7e4:	55 0b       	sbc	r21, r21
 7e6:	bb 27       	eor	r27, r27
 7e8:	aa 27       	eor	r26, r26
 7ea:	62 17       	cp	r22, r18
 7ec:	73 07       	cpc	r23, r19
 7ee:	84 07       	cpc	r24, r20
 7f0:	38 f0       	brcs	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	5f 4f       	sbci	r21, 0xFF	; 255
 7f6:	22 0f       	add	r18, r18
 7f8:	33 1f       	adc	r19, r19
 7fa:	44 1f       	adc	r20, r20
 7fc:	aa 1f       	adc	r26, r26
 7fe:	a9 f3       	breq	.-22     	; 0x7ea <__divsf3_pse+0x10>
 800:	35 d0       	rcall	.+106    	; 0x86c <__stack+0xd>
 802:	0e 2e       	mov	r0, r30
 804:	3a f0       	brmi	.+14     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 806:	e0 e8       	ldi	r30, 0x80	; 128
 808:	32 d0       	rcall	.+100    	; 0x86e <__stack+0xf>
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	e6 95       	lsr	r30
 810:	00 1c       	adc	r0, r0
 812:	ca f7       	brpl	.-14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 814:	2b d0       	rcall	.+86     	; 0x86c <__stack+0xd>
 816:	fe 2f       	mov	r31, r30
 818:	29 d0       	rcall	.+82     	; 0x86c <__stack+0xd>
 81a:	66 0f       	add	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	bb 1f       	adc	r27, r27
 822:	26 17       	cp	r18, r22
 824:	37 07       	cpc	r19, r23
 826:	48 07       	cpc	r20, r24
 828:	ab 07       	cpc	r26, r27
 82a:	b0 e8       	ldi	r27, 0x80	; 128
 82c:	09 f0       	breq	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82e:	bb 0b       	sbc	r27, r27
 830:	80 2d       	mov	r24, r0
 832:	bf 01       	movw	r22, r30
 834:	ff 27       	eor	r31, r31
 836:	93 58       	subi	r25, 0x83	; 131
 838:	5f 4f       	sbci	r21, 0xFF	; 255
 83a:	3a f0       	brmi	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	9e 3f       	cpi	r25, 0xFE	; 254
 83e:	51 05       	cpc	r21, r1
 840:	78 f0       	brcs	.+30     	; 0x860 <__stack+0x1>
 842:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__fp_inf>
 846:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__fp_szero>
 84a:	5f 3f       	cpi	r21, 0xFF	; 255
 84c:	e4 f3       	brlt	.-8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 84e:	98 3e       	cpi	r25, 0xE8	; 232
 850:	d4 f3       	brlt	.-12     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 852:	86 95       	lsr	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c9 f7       	brne	.-14     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 860:	88 0f       	add	r24, r24
 862:	91 1d       	adc	r25, r1
 864:	96 95       	lsr	r25
 866:	87 95       	ror	r24
 868:	97 f9       	bld	r25, 7
 86a:	08 95       	ret
 86c:	e1 e0       	ldi	r30, 0x01	; 1
 86e:	66 0f       	add	r22, r22
 870:	77 1f       	adc	r23, r23
 872:	88 1f       	adc	r24, r24
 874:	bb 1f       	adc	r27, r27
 876:	62 17       	cp	r22, r18
 878:	73 07       	cpc	r23, r19
 87a:	84 07       	cpc	r24, r20
 87c:	ba 07       	cpc	r27, r26
 87e:	20 f0       	brcs	.+8      	; 0x888 <__stack+0x29>
 880:	62 1b       	sub	r22, r18
 882:	73 0b       	sbc	r23, r19
 884:	84 0b       	sbc	r24, r20
 886:	ba 0b       	sbc	r27, r26
 888:	ee 1f       	adc	r30, r30
 88a:	88 f7       	brcc	.-30     	; 0x86e <__stack+0xf>
 88c:	e0 95       	com	r30
 88e:	08 95       	ret

00000890 <__fixunssfsi>:
 890:	0e 94 31 05 	call	0xa62	; 0xa62 <__fp_splitA>
 894:	88 f0       	brcs	.+34     	; 0x8b8 <__fixunssfsi+0x28>
 896:	9f 57       	subi	r25, 0x7F	; 127
 898:	98 f0       	brcs	.+38     	; 0x8c0 <__fixunssfsi+0x30>
 89a:	b9 2f       	mov	r27, r25
 89c:	99 27       	eor	r25, r25
 89e:	b7 51       	subi	r27, 0x17	; 23
 8a0:	b0 f0       	brcs	.+44     	; 0x8ce <__fixunssfsi+0x3e>
 8a2:	e1 f0       	breq	.+56     	; 0x8dc <__fixunssfsi+0x4c>
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	1a f0       	brmi	.+6      	; 0x8b4 <__fixunssfsi+0x24>
 8ae:	ba 95       	dec	r27
 8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__fixunssfsi+0x14>
 8b2:	14 c0       	rjmp	.+40     	; 0x8dc <__fixunssfsi+0x4c>
 8b4:	b1 30       	cpi	r27, 0x01	; 1
 8b6:	91 f0       	breq	.+36     	; 0x8dc <__fixunssfsi+0x4c>
 8b8:	0e 94 63 05 	call	0xac6	; 0xac6 <__fp_zero>
 8bc:	b1 e0       	ldi	r27, 0x01	; 1
 8be:	08 95       	ret
 8c0:	0c 94 63 05 	jmp	0xac6	; 0xac6 <__fp_zero>
 8c4:	67 2f       	mov	r22, r23
 8c6:	78 2f       	mov	r23, r24
 8c8:	88 27       	eor	r24, r24
 8ca:	b8 5f       	subi	r27, 0xF8	; 248
 8cc:	39 f0       	breq	.+14     	; 0x8dc <__fixunssfsi+0x4c>
 8ce:	b9 3f       	cpi	r27, 0xF9	; 249
 8d0:	cc f3       	brlt	.-14     	; 0x8c4 <__fixunssfsi+0x34>
 8d2:	86 95       	lsr	r24
 8d4:	77 95       	ror	r23
 8d6:	67 95       	ror	r22
 8d8:	b3 95       	inc	r27
 8da:	d9 f7       	brne	.-10     	; 0x8d2 <__fixunssfsi+0x42>
 8dc:	3e f4       	brtc	.+14     	; 0x8ec <__fixunssfsi+0x5c>
 8de:	90 95       	com	r25
 8e0:	80 95       	com	r24
 8e2:	70 95       	com	r23
 8e4:	61 95       	neg	r22
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__floatunsisf>:
 8ee:	e8 94       	clt
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__floatsisf+0x12>

000008f2 <__floatsisf>:
 8f2:	97 fb       	bst	r25, 7
 8f4:	3e f4       	brtc	.+14     	; 0x904 <__floatsisf+0x12>
 8f6:	90 95       	com	r25
 8f8:	80 95       	com	r24
 8fa:	70 95       	com	r23
 8fc:	61 95       	neg	r22
 8fe:	7f 4f       	sbci	r23, 0xFF	; 255
 900:	8f 4f       	sbci	r24, 0xFF	; 255
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	99 23       	and	r25, r25
 906:	a9 f0       	breq	.+42     	; 0x932 <__floatsisf+0x40>
 908:	f9 2f       	mov	r31, r25
 90a:	96 e9       	ldi	r25, 0x96	; 150
 90c:	bb 27       	eor	r27, r27
 90e:	93 95       	inc	r25
 910:	f6 95       	lsr	r31
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	f1 11       	cpse	r31, r1
 91c:	f8 cf       	rjmp	.-16     	; 0x90e <__floatsisf+0x1c>
 91e:	fa f4       	brpl	.+62     	; 0x95e <__floatsisf+0x6c>
 920:	bb 0f       	add	r27, r27
 922:	11 f4       	brne	.+4      	; 0x928 <__floatsisf+0x36>
 924:	60 ff       	sbrs	r22, 0
 926:	1b c0       	rjmp	.+54     	; 0x95e <__floatsisf+0x6c>
 928:	6f 5f       	subi	r22, 0xFF	; 255
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	8f 4f       	sbci	r24, 0xFF	; 255
 92e:	9f 4f       	sbci	r25, 0xFF	; 255
 930:	16 c0       	rjmp	.+44     	; 0x95e <__floatsisf+0x6c>
 932:	88 23       	and	r24, r24
 934:	11 f0       	breq	.+4      	; 0x93a <__floatsisf+0x48>
 936:	96 e9       	ldi	r25, 0x96	; 150
 938:	11 c0       	rjmp	.+34     	; 0x95c <__floatsisf+0x6a>
 93a:	77 23       	and	r23, r23
 93c:	21 f0       	breq	.+8      	; 0x946 <__floatsisf+0x54>
 93e:	9e e8       	ldi	r25, 0x8E	; 142
 940:	87 2f       	mov	r24, r23
 942:	76 2f       	mov	r23, r22
 944:	05 c0       	rjmp	.+10     	; 0x950 <__floatsisf+0x5e>
 946:	66 23       	and	r22, r22
 948:	71 f0       	breq	.+28     	; 0x966 <__floatsisf+0x74>
 94a:	96 e8       	ldi	r25, 0x86	; 134
 94c:	86 2f       	mov	r24, r22
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	2a f0       	brmi	.+10     	; 0x95e <__floatsisf+0x6c>
 954:	9a 95       	dec	r25
 956:	66 0f       	add	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	da f7       	brpl	.-10     	; 0x954 <__floatsisf+0x62>
 95e:	88 0f       	add	r24, r24
 960:	96 95       	lsr	r25
 962:	87 95       	ror	r24
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <__fp_cmp>:
 968:	99 0f       	add	r25, r25
 96a:	00 08       	sbc	r0, r0
 96c:	55 0f       	add	r21, r21
 96e:	aa 0b       	sbc	r26, r26
 970:	e0 e8       	ldi	r30, 0x80	; 128
 972:	fe ef       	ldi	r31, 0xFE	; 254
 974:	16 16       	cp	r1, r22
 976:	17 06       	cpc	r1, r23
 978:	e8 07       	cpc	r30, r24
 97a:	f9 07       	cpc	r31, r25
 97c:	c0 f0       	brcs	.+48     	; 0x9ae <__fp_cmp+0x46>
 97e:	12 16       	cp	r1, r18
 980:	13 06       	cpc	r1, r19
 982:	e4 07       	cpc	r30, r20
 984:	f5 07       	cpc	r31, r21
 986:	98 f0       	brcs	.+38     	; 0x9ae <__fp_cmp+0x46>
 988:	62 1b       	sub	r22, r18
 98a:	73 0b       	sbc	r23, r19
 98c:	84 0b       	sbc	r24, r20
 98e:	95 0b       	sbc	r25, r21
 990:	39 f4       	brne	.+14     	; 0x9a0 <__fp_cmp+0x38>
 992:	0a 26       	eor	r0, r26
 994:	61 f0       	breq	.+24     	; 0x9ae <__fp_cmp+0x46>
 996:	23 2b       	or	r18, r19
 998:	24 2b       	or	r18, r20
 99a:	25 2b       	or	r18, r21
 99c:	21 f4       	brne	.+8      	; 0x9a6 <__fp_cmp+0x3e>
 99e:	08 95       	ret
 9a0:	0a 26       	eor	r0, r26
 9a2:	09 f4       	brne	.+2      	; 0x9a6 <__fp_cmp+0x3e>
 9a4:	a1 40       	sbci	r26, 0x01	; 1
 9a6:	a6 95       	lsr	r26
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	81 1d       	adc	r24, r1
 9ac:	81 1d       	adc	r24, r1
 9ae:	08 95       	ret

000009b0 <__fp_inf>:
 9b0:	97 f9       	bld	r25, 7
 9b2:	9f 67       	ori	r25, 0x7F	; 127
 9b4:	80 e8       	ldi	r24, 0x80	; 128
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	60 e0       	ldi	r22, 0x00	; 0
 9ba:	08 95       	ret

000009bc <__fp_mintl>:
 9bc:	88 23       	and	r24, r24
 9be:	71 f4       	brne	.+28     	; 0x9dc <__fp_mintl+0x20>
 9c0:	77 23       	and	r23, r23
 9c2:	21 f0       	breq	.+8      	; 0x9cc <__fp_mintl+0x10>
 9c4:	98 50       	subi	r25, 0x08	; 8
 9c6:	87 2b       	or	r24, r23
 9c8:	76 2f       	mov	r23, r22
 9ca:	07 c0       	rjmp	.+14     	; 0x9da <__fp_mintl+0x1e>
 9cc:	66 23       	and	r22, r22
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_mintl+0x18>
 9d0:	99 27       	eor	r25, r25
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__fp_mintl+0x32>
 9d4:	90 51       	subi	r25, 0x10	; 16
 9d6:	86 2b       	or	r24, r22
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	60 e0       	ldi	r22, 0x00	; 0
 9dc:	2a f0       	brmi	.+10     	; 0x9e8 <__fp_mintl+0x2c>
 9de:	9a 95       	dec	r25
 9e0:	66 0f       	add	r22, r22
 9e2:	77 1f       	adc	r23, r23
 9e4:	88 1f       	adc	r24, r24
 9e6:	da f7       	brpl	.-10     	; 0x9de <__fp_mintl+0x22>
 9e8:	88 0f       	add	r24, r24
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	97 f9       	bld	r25, 7
 9f0:	08 95       	ret

000009f2 <__fp_mpack>:
 9f2:	9f 3f       	cpi	r25, 0xFF	; 255
 9f4:	31 f0       	breq	.+12     	; 0xa02 <__fp_mpack_finite+0xc>

000009f6 <__fp_mpack_finite>:
 9f6:	91 50       	subi	r25, 0x01	; 1
 9f8:	20 f4       	brcc	.+8      	; 0xa02 <__fp_mpack_finite+0xc>
 9fa:	87 95       	ror	r24
 9fc:	77 95       	ror	r23
 9fe:	67 95       	ror	r22
 a00:	b7 95       	ror	r27
 a02:	88 0f       	add	r24, r24
 a04:	91 1d       	adc	r25, r1
 a06:	96 95       	lsr	r25
 a08:	87 95       	ror	r24
 a0a:	97 f9       	bld	r25, 7
 a0c:	08 95       	ret

00000a0e <__fp_nan>:
 a0e:	9f ef       	ldi	r25, 0xFF	; 255
 a10:	80 ec       	ldi	r24, 0xC0	; 192
 a12:	08 95       	ret

00000a14 <__fp_pscA>:
 a14:	00 24       	eor	r0, r0
 a16:	0a 94       	dec	r0
 a18:	16 16       	cp	r1, r22
 a1a:	17 06       	cpc	r1, r23
 a1c:	18 06       	cpc	r1, r24
 a1e:	09 06       	cpc	r0, r25
 a20:	08 95       	ret

00000a22 <__fp_pscB>:
 a22:	00 24       	eor	r0, r0
 a24:	0a 94       	dec	r0
 a26:	12 16       	cp	r1, r18
 a28:	13 06       	cpc	r1, r19
 a2a:	14 06       	cpc	r1, r20
 a2c:	05 06       	cpc	r0, r21
 a2e:	08 95       	ret

00000a30 <__fp_round>:
 a30:	09 2e       	mov	r0, r25
 a32:	03 94       	inc	r0
 a34:	00 0c       	add	r0, r0
 a36:	11 f4       	brne	.+4      	; 0xa3c <__fp_round+0xc>
 a38:	88 23       	and	r24, r24
 a3a:	52 f0       	brmi	.+20     	; 0xa50 <__fp_round+0x20>
 a3c:	bb 0f       	add	r27, r27
 a3e:	40 f4       	brcc	.+16     	; 0xa50 <__fp_round+0x20>
 a40:	bf 2b       	or	r27, r31
 a42:	11 f4       	brne	.+4      	; 0xa48 <__fp_round+0x18>
 a44:	60 ff       	sbrs	r22, 0
 a46:	04 c0       	rjmp	.+8      	; 0xa50 <__fp_round+0x20>
 a48:	6f 5f       	subi	r22, 0xFF	; 255
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	08 95       	ret

00000a52 <__fp_split3>:
 a52:	57 fd       	sbrc	r21, 7
 a54:	90 58       	subi	r25, 0x80	; 128
 a56:	44 0f       	add	r20, r20
 a58:	55 1f       	adc	r21, r21
 a5a:	59 f0       	breq	.+22     	; 0xa72 <__fp_splitA+0x10>
 a5c:	5f 3f       	cpi	r21, 0xFF	; 255
 a5e:	71 f0       	breq	.+28     	; 0xa7c <__fp_splitA+0x1a>
 a60:	47 95       	ror	r20

00000a62 <__fp_splitA>:
 a62:	88 0f       	add	r24, r24
 a64:	97 fb       	bst	r25, 7
 a66:	99 1f       	adc	r25, r25
 a68:	61 f0       	breq	.+24     	; 0xa82 <__fp_splitA+0x20>
 a6a:	9f 3f       	cpi	r25, 0xFF	; 255
 a6c:	79 f0       	breq	.+30     	; 0xa8c <__fp_splitA+0x2a>
 a6e:	87 95       	ror	r24
 a70:	08 95       	ret
 a72:	12 16       	cp	r1, r18
 a74:	13 06       	cpc	r1, r19
 a76:	14 06       	cpc	r1, r20
 a78:	55 1f       	adc	r21, r21
 a7a:	f2 cf       	rjmp	.-28     	; 0xa60 <__fp_split3+0xe>
 a7c:	46 95       	lsr	r20
 a7e:	f1 df       	rcall	.-30     	; 0xa62 <__fp_splitA>
 a80:	08 c0       	rjmp	.+16     	; 0xa92 <__fp_splitA+0x30>
 a82:	16 16       	cp	r1, r22
 a84:	17 06       	cpc	r1, r23
 a86:	18 06       	cpc	r1, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	f1 cf       	rjmp	.-30     	; 0xa6e <__fp_splitA+0xc>
 a8c:	86 95       	lsr	r24
 a8e:	71 05       	cpc	r23, r1
 a90:	61 05       	cpc	r22, r1
 a92:	08 94       	sec
 a94:	08 95       	ret

00000a96 <__fp_trunc>:
 a96:	0e 94 31 05 	call	0xa62	; 0xa62 <__fp_splitA>
 a9a:	a0 f0       	brcs	.+40     	; 0xac4 <__fp_trunc+0x2e>
 a9c:	be e7       	ldi	r27, 0x7E	; 126
 a9e:	b9 17       	cp	r27, r25
 aa0:	88 f4       	brcc	.+34     	; 0xac4 <__fp_trunc+0x2e>
 aa2:	bb 27       	eor	r27, r27
 aa4:	9f 38       	cpi	r25, 0x8F	; 143
 aa6:	60 f4       	brcc	.+24     	; 0xac0 <__fp_trunc+0x2a>
 aa8:	16 16       	cp	r1, r22
 aaa:	b1 1d       	adc	r27, r1
 aac:	67 2f       	mov	r22, r23
 aae:	78 2f       	mov	r23, r24
 ab0:	88 27       	eor	r24, r24
 ab2:	98 5f       	subi	r25, 0xF8	; 248
 ab4:	f7 cf       	rjmp	.-18     	; 0xaa4 <__fp_trunc+0xe>
 ab6:	86 95       	lsr	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b1 1d       	adc	r27, r1
 abe:	93 95       	inc	r25
 ac0:	96 39       	cpi	r25, 0x96	; 150
 ac2:	c8 f3       	brcs	.-14     	; 0xab6 <__fp_trunc+0x20>
 ac4:	08 95       	ret

00000ac6 <__fp_zero>:
 ac6:	e8 94       	clt

00000ac8 <__fp_szero>:
 ac8:	bb 27       	eor	r27, r27
 aca:	66 27       	eor	r22, r22
 acc:	77 27       	eor	r23, r23
 ace:	cb 01       	movw	r24, r22
 ad0:	97 f9       	bld	r25, 7
 ad2:	08 95       	ret

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
